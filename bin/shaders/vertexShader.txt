#version 400 core

in vec3 position;
in vec2 textureCoords;
in vec3 normal;

out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector;
out vec3 toCameraVector;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition;
uniform vec2 tiling;
uniform bool globalNormal;
uniform vec3 windEffect;


void main ()
{
	vec4 rawWorldPosition = transformationMatrix * vec4 (position, 1.0);

	vec3 rootPosition = (transformationMatrix * vec4(0.0,0.0,0.0,1.0)).xyz;
	
	vec3 windAxis = (rawWorldPosition.xyz - rootPosition);
	
	float windForce = max(sqrt(windAxis.x * windAxis.x + windAxis.y * windAxis.y + windAxis.z * windAxis.z) - 1.0, 0.0);
	
	vec4 worldPosition = rawWorldPosition + vec4(windEffect * windForce, 1.0);
	//vec4 worldPosition = transformationMatrix * vec4 (textureCoords.x, 1.0 - textureCoords.y, 0.0, 1.0);
	
	gl_Position = projectionMatrix * viewMatrix * worldPosition;
	pass_textureCoords = vec2(textureCoords.x * tiling.x, textureCoords.y * tiling.y);
	
	if (globalNormal)
	{
		surfaceNormal = (transformationMatrix * vec4(vec3(0.0,1.0,0.0), 0.0)).xyz;
	} else {
		surfaceNormal = (transformationMatrix * vec4(normal, 0.0)).xyz;
	}
	toLightVector = lightPosition - worldPosition.xyz;
	
	toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
}






