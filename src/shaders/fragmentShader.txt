#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 out_Color;


uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;
uniform float ambienceIntencivity;
uniform float alphaCutOff;

void main (void)
{
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize (toLightVector);
	
	float nDotl = dot (unitNormal, unitLightVector);
	float brightness = max(nDotl, ambienceIntencivity);
	
	vec3 diffuse = brightness * lightColor;
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightLirection = reflect(lightDirection, unitNormal);
	
	float specularFactor = dot(reflectedLightLirection, unitVectorToCamera);
	specularFactor = max(specularFactor, 0.0);
	float damperFactor = pow(specularFactor, shineDamper);
	
	vec3 finalSpecular = damperFactor * reflectivity * lightColor;
	
	vec4 textureColor = texture(textureSampler, pass_textureCoords);
	
	if (textureColor.a < alphaCutOff)
	{
		discard;
	}
	
	out_Color = vec4(diffuse, 1.0) * textureColor + vec4(finalSpecular, 1.0);
}